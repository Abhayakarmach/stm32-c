import os

CORE = "cortex-m4"
OPTIMIZATION_LEVEL = "2"

env_arm = Environment(
  ENV=os.environ,
  CC="../../toolchain/mac/gcc-arm-none-eabi-10-2020-q4-major/bin/./arm-none-eabi-gcc",
  OBJCOPY="../../toolchain/mac/gcc-arm-none-eabi-10-2020-q4-major/bin/./arm-none-eabi-objcopy",
  OBJDUMP="../../toolchain/mac/gcc-arm-none-eabi-10-2020-q4-major/bin/./arm-none-eabi-objdump",
  SIZE="../../toolchain/mac/gcc-arm-none-eabi-10-2020-q4-major/bin/./arm-none-eabi-size",
  CFLAGS=[
    "-std=gnu18",
  ],
  LINKFLAGS=[
    "-specs=nano.specs",
    "-T./l0_lowlevel/linker/stm32f411ceux_linker.ld",
    "-Wl,-Map=./build/final.map"
  ],
  CPPPATH=[
    './',
    './l0_lowlevel/arm-software/cmsis/core/',
    './l0_lowlevel/includes/',
  ]
)

COMMON_FLAGS = [
  "-O{}".format(OPTIMIZATION_LEVEL),
  "-mcpu={}".format(CORE),
  "-mthumb",
  "-Wall",
  "-mfloat-abi=softfp"
]

def AllSources(node='.', pattern='*'):
  result = [AllSources(dir, pattern)
            for dir in Glob(str(node)+'/*')
            if dir.isdir()]
  result += [source
            for source in Glob(str(node)+'/'+pattern)
            if source.isfile()]
  return result

env_arm["CFLAGS"].extend(COMMON_FLAGS)
env_arm["LINKFLAGS"].extend(COMMON_FLAGS)

path ="./"
filelist = []

for root, dirs, files in os.walk(path):
  for file in files:
    if (file.endswith(".c")):
      filelist.append(os.path.join(root,file))

env_arm.Program(dir="./build", source=filelist)
# Alias("install", env_arm.Install(dir="./build", source=filelist))